basePath: /api
definitions:
  auth.LoginRequest:
    properties:
      email:
        example: string@gmail.com
        type: string
      password:
        example: string
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    properties:
      accessToken:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  auth.Register:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  user.UserCreate:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  user.UserDetail:
    properties:
      created_at:
        example: 2024-08-12 02:45:26.704606+00
        type: string
      email:
        example: z6Ls1@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      password:
        type: string
      updated_at:
        example: 2024-08-12 02:45:26.704606+00
        type: string
    required:
    - email
    - name
    type: object
  user.UserUpdate:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    required:
    - email
    - id
    - name
    - password
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample api.
  title: Go-Clean Example API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: User Login
      parameters:
      - description: user login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
      summary: User Login
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register User
      parameters:
      - description: user register
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.Register'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Register User
      tags:
      - Auth
  /users:
    post:
      consumes:
      - application/json
      description: Create User
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserDetail'
      security:
      - Bearer: []
      summary: Create User
      tags:
      - User
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user deleted
          schema:
            type: string
      summary: Delete User
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Detail User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserDetail'
      summary: Detail User
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Update User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserDetail'
      summary: Update User
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
